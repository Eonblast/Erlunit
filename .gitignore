# Erlang
*.beam
*.swf
*.dump

# Java
*.jar
*.class

# Logs
.out

# Mac
.DS_Store

#     Excerpt from http://ftp.df.lth.se/pub/software/scm/git/docs/gitignore.html:
#
#     Note that all the gitignore  files really concern only files that are not already tracked by git; 
#     in order to ignore uncommitted changes in already tracked files, please refer to the git update-index 
#     assume-unchanged documentation.
#
#     ... same directory as the path, or in any parent directory, with patterns in the higher level files
#     (up to the toplevel of the work tree) being overridden by those in lower level files
#
#    * A blank line matches no files, so it can serve as a separator for readability.
#    * A line starting with # serves as a comment.
#    * An optional prefix ! which negates the pattern; any matching file excluded by a previous pattern will 
#      become included again. If a negated pattern matches, this will override lower precedence patterns sources.
#    * If the pattern ends with a slash, it is removed for the purpose of the following description, but it would
#      only find a match with a directory. In other words, foo/ will match a directory foo and paths underneath it, 
#      but will not match a regular file or a symbolic link foo (this is consistent with the way how pathspec works 
#      in general in git).
#    * If the pattern does not contain a slash /, git treats it as a shell glob pattern and checks for a match against
#      the pathname without leading directories.
#    * Otherwise, git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME
#      flag: wildcards in the pattern will not match a / in the pathname. For example, "Documentation/*.html" matches
#      "Documentation/git.html" but not "Documentation/ppc/ppc.html". A leading slash matches the beginning of the
#      pathname; for example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
